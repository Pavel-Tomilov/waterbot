const { Telegraf } = require('telegraf');
const axios = require('axios');
const dotenv = require('dotenv');

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function getAddress(lat, lon) {
  try {
    const response = await axios.get('https://nominatim.openstreetmap.org/reverse', {
      params: {
        lat: lat,
        lon: lon,
        format: 'json',
        'accept-language': 'ru',
        zoom: 16 // –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–ª–∏—Ü–∞)
      },
      headers: {
        'User-Agent': 'YourWeatherBot/1.0' // –¢—Ä–µ–±—É–µ—Ç—Å—è Nominatim
      }
    });
    
    const address = response.data.address;
    let formattedAddress = '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    if (address.road) formattedAddress += address.road;
    if (address.house_number) formattedAddress += `, ${address.house_number}`;
    if (!formattedAddress && address.city) formattedAddress = address.city;
    if (!formattedAddress && address.village) formattedAddress = address.village;
    
    return formattedAddress || response.data.display_name || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å';
  }
}

bot.on('location', async (ctx) => {
  const { latitude, longitude } = ctx.message.location;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
    const address = await getAddress(latitude, longitude);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
    const weatherUrl = 'https://api.weatherapi.com/v1/current.json';
    const weatherParams = {
      key: process.env.WEATHER_API_KEY,
      q: `${latitude},${longitude}`,
      lang: 'ru'
    };

    const response = await axios.get(weatherUrl, { params: weatherParams });
    const weatherData = response.data;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üìç –ê–¥—Ä–µ—Å: ${address}
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.current.temp_c}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${weatherData.current.feelslike_c}¬∞C)
‚òÅ –ü–æ–≥–æ–¥–∞: ${weatherData.current.condition.text}
üí® –í–µ—Ç–µ—Ä: ${weatherData.current.wind_kph} –∫–º/—á
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData.current.humidity}%
    `;
    
    await ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.launch({
  skipPendingUpdates: true // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã
});
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');